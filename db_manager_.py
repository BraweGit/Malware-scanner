import json
from pathlib import Path

class DBManager:
    """ Provides basic functionality for communication with local JSON database.
    Creating database. Inserting new records. Updating existing records. 
    Or selecting record by its MD5 hash.
    """

    def __init__(self):

        self.Name = "mydb.json"
        self.db_check()
        self.records = []

    def get_malicious(self):

        malicious = []
        for record in self.records:
            if record["response_code"] == 1 and record["positives"] > 0:
                malicious.append(record)
        return malicious
    
    def reset_records(self):
        self.records = []

    def cache_records(self, records):
        self.records.extend(records)

    def cache_record(self, record):
        if not record in self.records:
            self.records.append(record)
        
    def db_check(self):
        """Check if db exists.
        If not, create new db file.
        """
        if not Path(self.Name).is_file():
            self.create_db()

    def create_db(self):
        """Creates new db .json file.
        """

        try:
            with open(self.Name, mode="w") as f:
                json.dump([],f)
        except IOError:
            print("Error! Unable to create database file!")      


    def add_records(self, to_insert_list):

        for record in to_insert_list:
            if record["response_code"] == 1:
                self.add_record(record)
                self.cache_record(record)

    def add_record(self, toInsert):
        """ If a record already exists update existing one.
        If record doesn't exist, insert a new one.

        Args:
            toInsert(dictionary): JSON dictionary
        """

        insert = True
        # Check if db exists, if not create a new one.
        self.db_check()

        # Read all records from db.
        try:
            with open(self.Name, mode = "r") as f:
                data = json.load(f)
        except IOError:
            print("Error! Unable to read from the database!")

        

        # Check every record in db.
        # If md5 hashes are equal item is already in the db.
        # If item is in there, just replace it with a new one.
        for item in data:
            if toInsert["response_code"] == 1 and toInsert["md5"] == item["md5"]:
                item = toInsert
                insert = False
                break
        
        # Write changes into db.

        try:
            with open(self.Name, mode = "w") as f:
                if(insert):
                    data.append(toInsert)
                json.dump(data, f, indent=4)
        except IOError:
            print("Error! Unable to insert data to the database!")

        

    def get_not_analyzed(self, files_dict):
        
        not_analyzed = []

        for key, value in files_dict.items():
            if not self.get_record(value):
                not_analyzed.append(key)

        return not_analyzed
        
    def get_record(self, md5):
        """Gets a record from the DB.

        Args:
            md5(string): MD5 hash of the record.
        Returns:
            dictionary: JSON dictionary.
        """
        # Check if db exists, if not create a new one.
        self.db_check()

        try:
            with open(self.Name, mode = "r") as f:
                data = json.load(f)
        except IOError:
            print("Error! Unable to read from the database!")

        # If record exists, return it.
        for item in data:
            if item["md5"] == md5:
                return item

        return None
