import json
from pathlib import Path

from tinydb import TinyDB, Query
from tinydb import where

class DBManager:
    """ Provides basic functionality for communication with local JSON database.
    Creating database. Inserting new records. Updating existing records. 
    Or selecting record by its MD5 hash.
    """

    def __init__(self):

        self.Name = "mydb.json"
        self.db = self.create_db()
        self.db_check()
        self.records = []

    def get_malicious(self):

        malicious = []
        for record in self.records:
            if record["response_code"] == 1 and record["positives"] > 0:
                malicious.append(record)
        return malicious
    
    def reset_records(self):
        self.records = []

    def cache_records(self, records):
        self.records.extend(records)

    def cache_record(self, record):
        if isinstance(record, list):
            if not record[0] in self.records:
                self.records.append(record[0])
        else:
            if not record in self.records:
                self.records.append(record)
        
    def db_check(self):
        """Check if db exists.
        If not, create new db file.
        """
        if not Path(self.Name).is_file():
            self.create_db()
        

    def create_db(self):
        """Creates new db .json file.
        """

        try:
            return TinyDB(self.Name)
        except IOError:
            print("Error! Unable to create database file!")      


    def add_records(self, to_insert_list):

        for record in to_insert_list:
            if record["response_code"] == 1:
                self.add_record(record)
                self.cache_record(record)

    def add_record(self, toInsert):
        """ If a record already exists update existing one.
        If record doesn't exist, insert a new one.

        Args:
            toInsert(dictionary): JSON dictionary
        """
        
        # Check if db exists, if not create a new one.
        self.db_check()

        # Check if record already exists.
        # If not insert it.
        # If yes, delete the old one and replace it with the new one.
        try:
            item = self.db.search(where("md5") == toInsert["md5"])
            if not item:
                self.db.insert(toInsert)
            else:
                self.db.remove(where("md5") == toInsert["md5"])
                self.db.insert(toInsert)
        except IOError:
            print("Error! Unable communicate with the database!")

        

    def get_not_analyzed(self, files_dict):
        
        not_analyzed = []

        for key, value in files_dict.items():
            if not self.get_record(value):
                not_analyzed.append(key)

        return not_analyzed
        
    def get_record(self, md5):
        """Gets a record from the DB.

        Args:
            md5(string): MD5 hash of the record.
        Returns:
            dictionary: JSON dictionary.
        """
        # Check if db exists, if not create a new one.
        self.db_check()

        try:
            item = self.db.search(where("md5") == md5)
        except IOError:
            print("Error! Unable to read from the database!")

        if item:
            return item

        return None
