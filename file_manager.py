import os
from os import walk
from os.path import join

import random
import struct

import hashlib
from hashlib import md5
from Crypto.Cipher import AES

class FileManager:

    def __init__(self):
        self.files = {}
        self.directory = ""
        #Encryption password and key.
        self.__password = "pvbps"
        self.__key = hashlib.sha256(self.__password.encode()).digest()
    
    def directory_files(self):
        """Finds all files in directory and subdirectories.
        
        Returns:
            list: List of absolute paths of files in directory and subdirectories.
        """
        try:
            path = self.directory.replace("/", "\\")
            for dirs, subdir, files in walk(path):
                for file in files:
                    self.files[join(dirs, file)] = "None"
        except IOError:
            print("Error! Unable to open some files in the directory!")

        
    def reset_files(self):
        self.files = {}

    def compute_md5_hash(self):
        """Computes MD5 hashes of all files.

        Returns:
            dict: Dictionary of MD5 hashes.
        """

        try:
            for filePath in self.files:
                hashMd5 = md5()
                with open(filePath, mode = "rb") as f:
                    for chunk in iter(lambda: f.read(4096), b""):
                        hashMd5.update(chunk)
            
                #Infected hash for testing!
                #"99017f6eebbac24f351415dd410d522d"
                self.files[filePath] = hashMd5.hexdigest() 
        except IOError:
            print("Error! Unable to open some files in the directory!")

    def is_dir_ok(self):
        
        return os.path.isdir(self.directory)
        

    def encrypt_files(self, records):

        file_names = []
        try:          
            for record in records:
                for key, value in self.files.items():
                    if value == record["md5"]:
                        file_names.append(key)
                    
            for file_name in file_names:
                self.encrypt_file(file_name)
        except IOError:
            print("Error! Unable to open some files in the directory!")


    def encrypt_file(self, in_filename, out_filename = None, chunksize = 64 * 1024):
        """ Encrypts a file using AES (CBC mode) with the
        given key.

        key:
            The encryption key - a string that must be
            either 16, 24 or 32 bytes long. Longer keys
            are more secure.

        in_filename:
            Name of the input file

        out_filename:
            If None, '<in_filename>.enc' will be used.

        chunksize:
            Sets the size of the chunk which the function
            uses to read and encrypt the file. Larger chunk
            sizes can be faster for some files and machines.
            chunksize must be divisible by 16.
        """

        try:
            if not out_filename:
                out_filename = in_filename + '.enc'

            iv = os.urandom(16)
            encryptor = AES.new(self.__key, AES.MODE_CBC, iv)
            filesize = os.path.getsize(in_filename)

            with open(in_filename, 'rb') as infile:
                with open(out_filename, 'wb') as outfile:
                    outfile.write(struct.pack('<Q', filesize))
                    outfile.write(iv)

                    while True:
                        chunk = infile.read(chunksize)
                        if len(chunk) == 0:
                            break
                        elif len(chunk) % 16 != 0:
                            chunk += ' '.encode() * (16 - len(chunk) % 16)

                        outfile.write(encryptor.encrypt(chunk))

            #Delete malicious file.
            os.remove(in_filename)
        except IOError:
            print("Error! Unable to encrypt some files in the directory!")


    def decrypt_file(self, key, in_filename, out_filename=None, chunksize=24*1024):
        """ Decrypts a file using AES (CBC mode) with the
            given key. Parameters are similar to encrypt_file,
            with one difference: out_filename, if not supplied
            will be in_filename without its last extension
            (i.e. if in_filename is 'aaa.zip.enc' then
            out_filename will be 'aaa.zip')
        """

        try:
            if not out_filename:
                out_filename = os.path.splitext(in_filename)[0]

            with open(in_filename, 'rb') as infile:
                origsize = struct.unpack('<Q', infile.read(struct.calcsize('Q')))[0]
                iv = infile.read(16)
                decryptor = AES.new(key, AES.MODE_CBC, iv)

                with open(out_filename, 'wb') as outfile:
                    while True:
                        chunk = infile.read(chunksize)
                        if len(chunk) == 0:
                            break
                        outfile.write(decryptor.decrypt(chunk))

                    outfile.truncate(origsize)
        except IOError:
            print("Error! Unable to decrypt some files in the directory!")

        
